module GaussQuadrature

# October 2013 by Bill McLean, School of Maths and Stats,
# The University of New South Wales.
#
# Based on earlier Fortran codes
#
# gaussq.f original version 20 Jan 1975 from Stanford
# gaussq.f modified 21 Dec by Eric Grosse
# gaussquad.f95 Nov 2005 by Bill Mclean
#
# This module provides functions to compute the abscissae x[j] and 
# weights w[j] for the classical Gauss quadrature rules, including 
# the Radau and Lobatto variants.  Thus, the sum
#
#           n
#          ---
#          \
#           |  w[j] f(x[j])
#          /
#          ---
#          j=1
#
# approximates
#
#          / hi
#          |
#          |    f(x) w(x) dx
#          |
#          / lo
#
# where the weight function w(x) and interval lo < x < hi are as shown
# in the table below.
#
# Name                      Interval     Weight Function
#
# Legendre                 -1 < x < 1          1      
# Chebyshev (first kind)   -1 < x < 1     1 / sqrt(1-x^2)        
# Chebyshev (second kind)  -1 < x < 1       sqrt(1-x^2)          
# Jacobi                   -1 < x < 1     (1-x)^α (1+x)^β  
# Laguerre                 0 < x < oo     x^α exp(-x)
# Hermite                 -oo < x < oo      exp(-x^2)
#
# For the Jacobi and Laguerre rules we require α > -1 and
# β > -1, so that the weight function is integrable. 
#
# Use the endpt argument to include one or both of the end points
# of the interval of integration as an abscissa in the quadrature 
# rule, as follows.
# 
# endpt = neither   Default      a < x[j] < b, j = 1:n.
# endpt = left      Left Radau   a = x[1] < x[j] < b, j = 2:n.
# endpt = right     Right Radau  a < x[j] < x[n] = b, j = 1:n-1.
# endpt = both      Lobatto      a = x[1] < x[j] < x[n] = b, j = 2:n-1.
#
# These labels make up an enumeration of type EndPt.
#
# The code uses the Golub and Welsch algorithm, in which the abscissae
# x[j] are the eigenvalues of a symmetric tridiagonal matrix whose 
# entries depend on the coefficients in the 3-term recurrence relation
# for the othonormal polynomials generated by the weighted inner product.
#
# References:
#
#   1.  Golub, G. H., and Welsch, J. H., Calculation of Gaussian
#       quadrature rules, Mathematics of Computation 23 (April,
#       1969), pp. 221-230.
#   2.  Golub, G. H., Some modified matrix eigenvalue problems,
#       Siam Review 15 (april, 1973), pp. 318-334 (section 7).
#   3.  Stroud and Secrest, Gaussian Quadrature Formulas, Prentice-
#       Hall, Englewood Cliffs, N.J., 1966.

export neither, left, right, both
export legendre, legendre_coefs
export chebyshev, chebyshev_coefs
export jacobi, jacobi_coefs
export laguerre, laguerre_coefs
export hermite, hermite_coefs
export logweight, logweight_coefs
export custom_gauss_rule, orthonormal_poly
export special_eigenproblem! 

"""
Enumeration type used to specify which endpoints of the integration
interval should be included amongst the quadrature points: neither,
left, right or both.
"""
immutable EndPt
    label :: Char
end

const neither = EndPt('N')
const left    = EndPt('L')
const right   = EndPt('R')
const both    = EndPt('B')

include("to_be_removed.jl")

# Maximum number of QL iterations used by steig!.
# You might need to increase this.
maxiterations = Dict(Float32 => 30, Float64 => 30, BigFloat => 40)

"""
x, w = legendre(T, n, endpt=neither)

Returns points x and weights w for the n-point Gauss-Legendre rule
for the interval -1 < x < 1 with weight function w(x) = 1.

Use endpt=left, right, both for the left Radau, right Radau, Lobatto 
rules.
"""
function legendre{T<:AbstractFloat}(::Type{T}, 
                 n::Integer, endpt::EndPt=neither)
    a, b = legendre_coefs(T, n)
    return custom_gauss_rule(-one(T), one(T), a, b, endpt)
end

"""
x, w = legendre(n, endpt=neither)

Convenience function with type T = Float64.
"""
legendre(n, endpt=neither) = legendre(Float64, n, endpt)

function legendre_coefs{T<:AbstractFloat}(::Type{T}, n::Integer)
    a = zeros(T, n)
    b = zeros(T, n+1)
    b[1] = sqrt(convert(T, 2))
    for k = 2:n
        b[k] = (k-1) / sqrt(convert(T, (2k-1)*(2k-3)))
    end
    return a, b
end

"""
x, w = chebyshev(T, n, kind=1, endpt=neither)

Returns points x and weights w for the n-point Gauss-Chebyshev rule
for the interval -1 < x < 1 with weight function

    w(x) = 1 / sqrt(1-x^2) if kind=1
    w(x) = sqrt(1-x^2)     if kind=2.

Use endpt=left, right, both for the left Radau, right Radau, Lobatto 
rules.
"""
function chebyshev{T<:AbstractFloat}(::Type{T},
                  n::Integer, kind::Integer=1, endpt::EndPt=neither)
    a, b = chebyshev_coefs(T, n, kind)
    return custom_gauss_rule(-one(T), one(T), a, b, endpt)
end

"""
x, w = chebyshev(n, kind=1, endpt=neither)

Convenience function with type T = Float64.
"""
chebyshev(n, kind=1, endpt=neither) = chebyshev(Float64, n, kind, 
                                                endpt)
function chebyshev_coefs{T<:AbstractFloat}(::Type{T},
                        n::Integer, kind::Integer)
    half = convert(T, 1//2)
    a = zeros(T, n)
    b = fill(half, n+1)
    if kind == 1 
        b[1] = sqrt(convert(T, pi))
	if n >= 2
            b[2] = sqrt(half)
        end
    elseif kind == 2
        b[1] = sqrt(half * convert(T, pi))
    else
        error("Unsupported value for kind")
    end
    return a, b
end

"""
x, w = jacobi(n, α, β, endpt=neither)

Returns points x and weights w for the n-point Gauss-Jacobi rule
for the interval -1 < x < 1 with weight function

    w(x) = (1-x)^α (1+x)^β.

Use endpt=left, right, both for the left Radau, right Radau, Lobatto 
rules.
"""
function jacobi{T<:AbstractFloat}(n::Integer, α::T, β::T, 
                                  endpt::EndPt=neither)
    @assert α > -1.0 && β > -1.0
    a, b = jacobi_coefs(n, α, β)
    custom_gauss_rule(-one(T), one(T), a, b, endpt)
end

function jacobi_coefs{T<:AbstractFloat}(n::Integer, α::T, β::T)
    a = zeros(T, n)
    b = zeros(T, n+1)
    ab = α + β
    abi = ab + 2
    b[1] = 2^((ab+1)/2) * exp(
             ( lgamma(α+1) + lgamma(β+1) - lgamma(abi) )/2 )
    a[1] = ( β - α ) / abi
    b[2] = sqrt( 4*(α+1)*(β+1) / ( (ab+3)*abi*abi ) )
    a2b2 = β*β - α*α
    for i = 2:n
        abi = ab + 2i
        a[i]   = a2b2 / ( (abi-2)*abi )
        b[i+1] = sqrt( 4i*(α+i)*(β+i)*(ab+i) /
                     ( (abi*abi-1)*abi*abi ) )
    end   
    return a, b
end

"""
x, w = laguerre(n, α, endpt=neither)

Returns points x and weights w for the n-point Gauss-Laguerre rule
for the interval 0 < x < oo with weight function

    w(x) = x^α exp(-x)

Use endpt=left for the left Radau rule.
"""
function laguerre{T<:AbstractFloat}(n::Integer, α::T, 
                                    endpt::EndPt=neither)
    @assert α > -1.0
    @assert endpt in [neither, left]
    a, b = laguerre_coefs(n, α)
    custom_gauss_rule(zero(T), convert(T, Inf), a, b, endpt)
end

function laguerre_coefs{T<:AbstractFloat}(n::Integer, α::T)
    a = zeros(T, n)
    b = zeros(T, n+1)
    b[1] = sqrt(gamma(α+1))
    for i = 1:n
        a[i] = 2i - 1 + α
        b[i+1] = sqrt( i*(α+i) )
    end
    return a, b
end

"""
x, w = hermite(T, n)

Returns points x and weights w for the n-point Gauss-Laguerre rule
for the interval -oo < x < oo with weight function

    w(x) = exp(-x^2).
"""
function hermite{T<:AbstractFloat}(::Type{T}, n::Integer)
    a, b = hermite_coefs(T, n)
    custom_gauss_rule(convert(T, -Inf), convert(T, Inf), a, b, neither)
end

"""
x, w = hermite(n)

Convenience function with type T = Float64.
"""
hermite(n) = hermite(Float64, n)

function hermite_coefs{T<:AbstractFloat}(::Type{T}, n::Integer)
    a = zeros(T, n)
    b = zeros(T, n+1)
    b[1] = sqrt(sqrt(convert(T, pi)))
    for i = 1:n
        iT = convert(T, i)
        b[i+1] = sqrt(iT/2)
    end
    return a, b
end

function logweight{T<:AbstractFloat}(::Type{T}, n::Integer, r::Integer, 
                                     endpt::EndPt=neither)
    α, β = logweight_coefs(T, n, r)
    custom_gauss_rule(zero(T), one(T), α, β, endpt)
end

logweight(n, r, endpt=neither) = logweight(Float64, n, r, endpt)

function logweight_coefs{T<:AbstractFloat}(::Type{T}, n::Integer, r::Integer)
    @assert r >= 0
    @assert n >= 0
    # Compute the modified moments.
    m = min(2n, r+1)
    C = zeros(T, m)
    C[1] = one(T)
    for l = 1:m-1
        lT = convert(T, l)
        C[l+1] = 2(2-1/lT) * C[l]
    end
    rrp1 = 1 / convert(T, r+1) # reciprocal r+1
    s = rrp1
    p = one(T)
    ν = zeros(T, 2n)
    ν[1] = rrp1 * s
    for l = 2:m
        j = l - 1
        rrpj = 1 / convert(T, r + 1 + j)
        rrmj = 1 / convert(T, r + 1 - j)
        s +=  rrpj - rrmj
        p *= rmj / rpj
        ν[l] = rrp1 * s * p / C[l]
    end
    if 2n > r+1
        l = r + 1
        rl = 1 / convert(T, l)
        Crp2 = 2 * (2l-1) * rl * C[r+1] 
        p = one(T)
        for j = 1:r
            p *= j / convert(T, 2(2j+1))
        end
        ν[r+2] = - p / ( 2(r+1)*Crp2 )
        for l = r+2:2n-1
            ν[l+1] = - ( ( (l-r-1)/ convert(T, l+r+1) )
                       * ( l * ν[l] / convert(T, 2(2l-1) ) ) )
        end
    end
    a, b = shifted_legendre_coefs(T, 2n)
    α, β = modified_chebyshev(a, b, ν)
    return α, β
end

function shifted_legendre_coefs(T, n)
    a = zeros(T, n)
    b = zeros(T, n+1)
    fill!(a, 1/convert(T,2))
    b[1] = one(T)
    for k = 2:n+1
        b[k] = (k-1) / ( 2 * sqrt( convert(T, (2k-1)*(2k-3)) ) )
    end
    return a, b
end

function custom_gauss_rule{T<:AbstractFloat}(lo::T, hi::T, 
         a::Array{T,1}, b::Array{T,1}, endpt::EndPt,
         maxits::Integer=maxiterations[T])
    #
    # On entry:
    #
    # a, b hold the coefficients (as given, for instance, by
    # legendre_coeff) in the three-term recurrence relation
    # for the orthonormal polynomials ̂p₀, ̂p₁, ̂p₂, ... , that is,
    #
    #    b[k+1] ̂p (x) = (x-a[k]) ̂p   (x) - b[k] ̂p   (x).
    #            k                k-1            k-2
    #      
    # where, by convention
    #
    #              / hi
    #             |
    #    b[1]^2 = | w(x) dx.
    #             |
    #             / lo
    #
    # On return:
    #
    # x, w hold the points and weights.
    #
    n = length(a)
    @assert length(b) == n+1
    if endpt == left 
        if n == 1
            a[1] = lo
        else
            a[n] = solve(n, lo, a, b) * b[n]^2 + lo
        end
    elseif endpt == right
        if n == 1
            a[1] = hi
        else
            a[n] = solve(n, hi, a, b) * b[n]^2 + hi
        end
    elseif endpt == both
        if n == 1 
            error("Must have at least two points for both ends.")
        end 
        g = solve(n, lo, a, b)
        t1 = ( hi - lo ) / ( g - solve(n, hi, a, b) )
        b[n] = sqrt(t1)
        a[n] = lo + g * t1
    end
    w = zero(a)
    special_eigenproblem!(a, b, w, maxits)
    for i = 1:n
        w[i] = (b[1] * w[i])^2
    end
    idx = sortperm(a)
    # Ensure end point values are exact.
    if endpt == left
        a[idx[1]] = lo
    elseif endpt == right
        a[idx[n]] = hi 
    end
    return a[idx], w[idx]
end

function modified_chebyshev{T<:AbstractFloat}(
                  a::Vector{T}, b::Vector{T}, ν::Vector{T})
    m = length(ν) 
    @assert m % 2 == 0 && m >= 2
    n = div(m, 2)
    @assert length(a) >= max(1, 2n-2)
    @assert length(b) >= max(1, 2n-2)
    α = zeros(T, n)
    β = zeros(T, n+1)
    α[1] = a[1] + ν[2]/ν[1]
    β[1] = sqrt(ν[1])
    if n >= 2
        σ = zeros(T, 2n, n)
        for l = 1:2n
            σ[l,1] = ν[l]
        end
        for l = 1:2n-2
            σ[l+1,2] = ( σ[l+2,1] + ( a[l] - α[1] ) * σ[l+1,1]
  	             + b[l]^2 * σ[l,1] )
        end
        α[2] = a[2] + σ[3,2] / σ[2,2] - σ[2,1] / σ[1,1]
        β[2] = sqrt(σ[2,2] / σ[1,1])
        for k = 2:n-1
            for l = k:2n-k-1
                σ[l+1,k+1] = ( σ[l+2,k] + ( a[l] - α[k] ) * σ[l+1,k]
                         + b[l]^2 * σ[l,k] - β[k]^2 * σ[l+1,k-1] )
            end
	    α[k+1] = a[k+1] + σ[k+2,k+1] / σ[k+1,k+1] - σ[k+1,k] / σ[k,k]
	    β[k+1] = sqrt(σ[k+1,k+1] / σ[k,k])
        end
    end
    return α, β
end

function solve{T<:AbstractFloat}(n::Integer, shift::T, 
                                 a::Array{T,1}, b::Array{T,1})
    #
    # Perform elimination to find the nth component s = delta[n]
    # of the solution to the nxn linear system
    #
    #     ( J_n - shift I_n ) delta = e_n,
    #
    # where J_n is the symmetric tridiagonal matrix with diagonal
    # entries a[i] and off-diagonal entries b[i], and e_n is the nth
    # standard basis vector.
    #
    t = a[1] - shift
    for i = 2:n-1
        t = a[i] - shift - b[i]^2 / t
    end
    return one(t) / t
end

function special_eigenproblem!{T<:AbstractFloat}(d::Array{T,1}, e::Array{T,1}, 
                               z::Array{T,1}, maxits::Integer)
    #
    # Finds the eigenvalues and first components of the normalised
    # eigenvectors of a symmetric tridiagonal matrix by the implicit
    # QL method.
    #
    # d[i]   On entry, holds the ith diagonal entry of the matrix. 
    #        On exit, holds the ith eigenvalue.
    #
    # e[i]   On entry, holds the [i,i-1] entry of the matrix for
    #        i = 2, 3, ..., n.  (The value of e[1] is not used.)
    #        On exit, e is overwritten.
    #
    # z[i]   On exit, holds the first component of the ith normalised
    #        eigenvector associated with d[i].
    #
    # maxits The maximum number of QL iterations.
    #
    # Martin and Wilkinson, Numer. Math. 12: 377-383 (1968).
    # Dubrulle, Numer. Math. 15: 450 (1970).
    # Handbook for Automatic Computation, Vol ii, Linear Algebra, 
    #        pp. 241-248, 1971.
    #
    # This is a modified version of the Eispack routine imtql2.
    #
    n = length(z)
    z[1] = one(T) 
    z[2:n] = zero(T) 
    e[n+1] = zero(T)

    if n == 1 # Nothing to do for a 1x1 matrix.
        return
    end
    for l = 1:n
        for j = 1:maxits
            # Look for small off-diagonal elements.
            m = n
            for i = l:n-1
                if abs(e[i+1]) <= eps(T) * ( abs(d[i]) + abs(d[i+1]) )
                    m = i
                    break   
                end
            end
            p = d[l]
            if m == l
                continue
            end
            if j == maxits
                msg = @sprintf("No convergence after %d iterations", j)
                msg *= " (try increasing maxits)"
                error(msg)
            end
            # Form shift
            g = ( d[l+1] - p ) / ( 2 * e[l+1] )
            r = hypot(g, one(T))
            g = d[m] - p + e[l+1] / ( g + copysign(r, g) )
            s = one(T)
            c = one(T)
            p = zero(T)
            for i = m-1:-1:l
                f = s * e[i+1]
                b = c * e[i+1]
                if abs(f) <  abs(g)
                    s = f / g
                    r = hypot(s, one(T))
                    e[i+2] = g * r
                    c = one(T) / r
                    s *= c
                else
                    c = g / f
                    r = hypot(c, one(T))
                    e[i+2] = f * r
                    s = one(T) / r
                    c *= s
                end 
                g = d[i+1] - p
                r = ( d[i] - g ) * s + 2 * c * b
                p = s * r
                d[i+1] = g + p
                g = c * r - b
                # Form first component of vector.
                f = z[i+1]
                z[i+1] = s * z[i] + c * f
                z[i]   = c * z[i] - s * f
            end # loop over i
            d[l] -= p
            e[l+1] = g
            e[m+1] = zero(T)
        end # loop over j
    end # loop over l
end

function orthonormal_poly{T<:AbstractFloat}(x::Array{T,1}, 
                         a::Array{T,1}, b::Array{T,1}, μ0::T)
    # p[i,j] = value at x[i] of orthonormal polynomial of degree j-1.
    m = length(x)
    n = length(a)
    p = zeros(T, m, n+1)
    c = one(T) / sqrt(μ0)
    rb = one(T) / b[1]
    for i = 1:m
        p[i,1] = c
        p[i,2] = rb * ( x[i] - a[1] ) * c
    end 
    for j = 2:n
       rb = one(T) / b[j]
       for i = 1:m
           p[i,j+1] = rb * ( (x[i]-a[j]) * p[i,j] 
                                - b[j-1] * p[i,j-1] )
       end
    end
    return p
end

end
